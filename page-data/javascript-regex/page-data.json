{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript-regex/","result":{"data":{"site":{"siteMetadata":{"title":"jvikraman"}},"markdownRemark":{"id":"3053ca25-6955-5ea1-b25a-0c9866386621","excerpt":"A quick 101 on the fundamentals of regular expressions and how to use them in Javascript. Two common ways to use regular expressions Constructor form -> for e.g…","html":"<p>A quick <em>101 on the fundamentals</em> of regular expressions and <em>how to use them in Javascript</em>.</p>\n<h3>Two <em>common ways</em> to use regular expressions</h3>\n<ul>\n<li><em>Constructor form</em> -> for e.g. <code class=\"language-js\"><span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>pattern<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>flags<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></li>\n<li><em>Literal form</em> -> <code class=\"language-js\"><span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>pattern<span class=\"token operator\">></span><span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>flags<span class=\"token operator\">></span></code></li>\n</ul>\n<h3>Example:</h3>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Input string</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">What is what?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Constructor form</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// Literal form</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/wh/</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// Execution options:</span>\n<span class=\"token comment\">// test() method - returns true/false about a potential match</span>\n\n<span class=\"token comment\">// exec() method - returns an array containing the matches </span>\n<span class=\"token comment\">// alongwith the match index and original input. </span>\n<span class=\"token comment\">// Running `exec` multiple times will keep finding</span>\n<span class=\"token comment\">// subsequent occurrences.</span>\n\n<span class=\"gatsby-highlight-code-line\">regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// Output: true</span>\n\n<span class=\"gatsby-highlight-code-line\">regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// Output: [ 'wh', index: 8, input: 'What is what?', groups: undefined ]</span></code></pre></div>\n<h3>Additional <em>search options</em> using <em>flags</em></h3>\n<ul>\n<li>Include <code class=\"language-text\">g</code> flag to <em>search globally</em></li>\n<li><code class=\"language-text\">i</code> for <em>case insensitive search</em></li>\n<li><code class=\"language-text\">m</code> to <em>include multi-lines</em> in search</li>\n<li>For e.g. <code class=\"language-js\"><span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/wh/gim</span><span class=\"token punctuation\">;</span></code></li>\n</ul>\n<h3>Usage with <em>String.prototype</em></h3>\n<ul>\n<li><code class=\"language-js\">str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code> -> returns an <em>array of all the matches</em></li>\n<li><code class=\"language-js\">str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code> -> <em>replace matches</em> with preferred characters</li>\n<li><code class=\"language-js\">str<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code> -> returns the <em>index of the first match</em></li>\n</ul>\n<hr>\n<h3>Using <em>plain-text patterns</em></h3>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Input string</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Blake ate the cake.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/.ak/g</span><span class=\"token punctuation\">;</span></span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Output: [ 'lak', 'cak' ]</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"XX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: BXXe ate the XXe.</span></code></pre></div>\n<ul>\n<li>In the above example the dot/period <code class=\"language-text\">.</code> <em>meta character</em> preceeding the pattern <code class=\"language-text\">ak</code> is trying to find a match where characters <code class=\"language-text\">ak</code> is <em>preceded by exactly one character</em></li>\n<li>Use <em>more dots</em> to find <code class=\"language-text\">n</code> occurrences of characters preceeding <code class=\"language-text\">ak</code></li>\n<li><code class=\"language-text\">.</code> meta character <em>finds characters, digits, non-breaking spaces, dashes but not line-breaks</em></li>\n</ul>\n<h3>✋ A note on <em>escape sequences</em></h3>\n<ul>\n<li>To <em>escape a character/sequence</em> anytime, use the <em>special backslash</em> <code class=\"language-text\">\\</code> character</li>\n<li>In the above example, to find the <code class=\"language-text\">.</code> character, use the expression <code class=\"language-js\"><span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\.ak/g</span><span class=\"token punctuation\">;</span></code></li>\n</ul>\n<hr>\n<h3>Find <em>repeating patterns using quantifiers</em></h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Input string</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ddddddd</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Find 4 occurrences of char `d` in a row</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/dddd/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Same as above, but using quantifier {4}</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/d{4}/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Find at least 3 matches of `d` on to infinity</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/d{3,}/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Find at least 3 matches of `d` up to 4</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/d{3,4}/g</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>✋ Special patterns</h3>\n<ul>\n<li><code class=\"language-js\"><span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>char<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token function\">g</span> <span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>char<span class=\"token operator\">></span><span class=\"token operator\">*</span><span class=\"token operator\">/</span>g</code> -> <em>zero matches to infinity</em></li>\n<li><code class=\"language-js\"><span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>char<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token function\">g</span> <span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>char<span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">/</span>g</code> -> <em>one or more matches to infinity</em></li>\n<li><code class=\"language-js\"><span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>char<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token function\">g</span> <span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>char<span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token operator\">/</span>g</code> -> <em>zero or one match</em></li>\n</ul>\n<h3>Example:</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Find 0 to infinity - matches empty spaces as well</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/d{0,}/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Short-hand version</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/d*/g</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// Since there's no `c` char, matches all empty spaces</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/c*/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Find 1 or more occurrences to infinity incl. spaces</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/d+/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Find 0 or 1 occurrence incl. spaces</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/d?/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A more real-world scenario - finding valid web addresses</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://github.com\nsome text\nhttp://\nhttps://www.github.com</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/https{0,1}:\\/\\/.{1,}/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Short-hand version</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/https?:\\/\\/.+/g</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// Output: [ 'http://github.com', 'https://www.github.com' ]</span></code></pre></div>\n<hr>\n<h3>Character classes</h3>\n<p>Identify <em>specific sets of optional characters</em> we are <em>willing to accept</em> as part of matches.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Input string</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hot lot Dot !ot 0ot</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Find occurrences of char `ot` preceeded by either `h` or `l`</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[hl]ot/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: XX XX Dot !ot 0ot</span>\n\n<span class=\"token comment\">// Find occurrences of char `ot` not preceeded by `h` or `l`</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[^hl]ot/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: hot lot XX XX XX</span>\n\n<span class=\"token comment\">// Character ranges</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-z]ot/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: XX XX Dot !ot 0ot</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-zA-Z]/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: XXXXXX XXXXXX XXXXXX !XXXX 0XXXX</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-kA-Z]/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: XXot lot XXot !ot 0ot</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[^a-kA-Z]ot/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: hot XX Dot XX XX</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-zA-Z0-9]ot/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: XX XX XX !ot XX</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-zA-Z0-9!]ot/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: XX XX XX XX XX</span></code></pre></div>\n<h3>✋ Short-hand versions</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Input string</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Blue #220 10.5%</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Match all characters except symbols, spaces</span>\n<span class=\"token comment\">// digits &amp; unicode characters</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-zA-Z0-9]/g</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (or) use short-hand /\\w/g;</span>\n<span class=\"token comment\">// Output: XXXXXXXX #XXXXXX XXXX.XX%</span>\n\n<span class=\"token comment\">// Match all digits</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: Blue #XXXXXX XXXX.XX%</span>\n\n<span class=\"token comment\">// Match all white-space</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\s/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: BlueXX#220XX10.5%</span>\n\n<span class=\"token comment\">// --- Negation ---</span>\n<span class=\"token comment\">// Match only white-space and symbols</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[^\\w]/g</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (or) use short-hand /\\W/g;</span>\n<span class=\"token comment\">// Output: BlueXXXX220XX10XX5XX</span>\n\n<span class=\"token comment\">// Match everything that's not a digit</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[^\\d]/g</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (or) use short-hand /\\D/g;</span>\n<span class=\"token comment\">// Output: XXXXXXXXXXXX220XX10XX5XX</span>\n\n<span class=\"token comment\">// Match everything that's not white-spaces</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[^\\s]/g</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (or) use short-hand /\\S/g;</span>\n<span class=\"token comment\">// Output: XXXXXXXX XXXXXXXX XXXXXXXXXX</span></code></pre></div>\n<hr>\n<h3>Capture groups</h3>\n<p>Search for matches by <em>specifying terms within parens</em> for e.g. <code class=\"language-js\"><span class=\"token regex\">/&lt;primary text>(secondary|tertiary)/g</span><span class=\"token punctuation\">;</span></code></p>\n<h3>Example:</h3>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre style=\"counter-reset: linenumber 0\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">// Input string</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello\nhelloworld\nhellothere\nhellohi</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Search for matches where `hello` is followed by</span>\n<span class=\"token comment\">// either `world` or `hi`</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/hello(world|hi)/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Output:\n    hello \n    XX \n    hellothere \n    XX\n*/</span>\n\n<span class=\"token comment\">// Same as above, but search for 0 or 1 occurrence</span>\n<span class=\"token comment\">// using quantifier</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/hello(world|hi)?/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Output:\n    XX \n    XX \n    XXthere \n    XX \n*/</span>\n\n<span class=\"token comment\">// A more real-world example - capturing area codes</span>\n<span class=\"token comment\">// from phone numbers</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> \n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">800-234-4321\n  (444) 342-7861\n  7778976754</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// $1 in the following `console.log` @line 44 is getting</span>\n<span class=\"token comment\">// a reference to the capture group</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\(?(\\d{3})\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If you don't need to store that reference</span>\n<span class=\"token comment\">// use `?:` inside the capture group. for e.g.</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\(?(?:\\d{3})\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"area code: $1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">/* Output:\n    area code: 800\n    area code: 444\n    area code: 777\n*/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<hr>\n<h3>Lookaheads</h3>\n<p>Similar to capture groups, <em>but if you want to exclude the capture group result</em>.</p>\n<h3>Example:</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Input string</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> \n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello\n  helloworld\n  hellothere\n  hellohi</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Positive lookahead - i.e. find matches of `hello`</span>\n<span class=\"token comment\">// followed by either `world` or `hi`</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/hello(?=world|hi)/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Output:\n    hello \n    XXworld \n    hellothere \n    XXhi \n*/</span>\n\n<span class=\"token comment\">// Negative lookahead - i.e. find matches of `hello`</span>\n<span class=\"token comment\">// not followed by either `world` or `hi`</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/hello(?!world|hi)/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Output:\n    XX \n    helloworld \n    XXthere \n    hellohi\n*/</span></code></pre></div>\n<hr>\n<h3>Word boundaries</h3>\n<p>Search for <em>occurrences by specifying starting and ending boundaries</em> using <code class=\"language-text\">\\b</code></p>\n<h3>Example:</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Input string</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">This bus is isomorphic. It truly is.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Find occurrences that begins and ends with `is`</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\bis\\b/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: This bus XX isomorphic. It truly XX.</span>\n\n<span class=\"token comment\">// Negate the search using `\\B` - i.e. find occurrences of</span>\n<span class=\"token comment\">// `is` which is not the beginning</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\Bis/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: ThXX bus is isomorphic. It truly is.</span>\n\n<span class=\"token comment\">// You can use the `\\B` at the end as well</span>\n<span class=\"token comment\">// i.e. find occurrences of `is` which is not the end</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/is\\B/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: This bus is XXomorphic. It truly is.</span>\n\n<span class=\"token comment\">// You can also combine the negation both at the start </span>\n<span class=\"token comment\">// and end of the search. For e.g. find occurrences of </span>\n<span class=\"token comment\">// `is` which is not at the beginning or at the end</span>\n<span class=\"token comment\">// (more like, in the middle)</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">My wallet is missing.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\Bis\\B/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: My wallet is mXXsing.</span></code></pre></div>\n<hr>\n<h3>Back-references</h3>\n<p>Match the <em>same string twice</em> using back-references.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Input string</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">He went to to the mall.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Match the first `to` followed by a space and a second `to`</span>\n\n<span class=\"token comment\">// `\\1` is the backreference of the first capture group `(to)`</span>\n<span class=\"token comment\">// `(?=)` is the positive lookahead to filter to just </span>\n<span class=\"token comment\">// the first `to` occurrence</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/(to)\\s?(?=\\1)/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: He went XXto the mall.</span>\n\n<span class=\"token comment\">// Applying to real-world scenarios:</span>\n\n<span class=\"token comment\">// 1. Clean-up duplicate characters/words</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: He went to the mall.</span>\n\n<span class=\"token comment\">// 2. Grab inner content from html tags</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div>Hello&lt;/div>&lt;p>World&lt;/p></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// `(\\w+)` -> capture any numbers of characters (cap. grp #1)</span>\n<span class=\"token comment\">// `(.*)` -> capture any content</span>\n<span class=\"token comment\">// `\\1` -> backreference for cap. grp #1</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/&lt;(\\w+)>(.*)&lt;\\/\\1>/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Output:\n    Hello\n    World\n*/</span></code></pre></div>\n<hr>\n<h3>Line anchors</h3>\n<p><em>Capture beginning and end of lines</em> using line anchors.</p>\n<h3>Example:</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Input string</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> \n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">11/2/18\n  11/18/17\n  09/12/18\n  11-10-2018</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Find occurrences of `11` at the beginning of line that also</span>\n<span class=\"token comment\">// ends with `18` - in other words, pick all the dates in Nov 2018</span>\n\n<span class=\"token comment\">// `^` -> beginning indicator vs negation in capture groups</span>\n<span class=\"token comment\">// `m` -> mult-line flag. Looks for beginning of line</span>\n<span class=\"token comment\">//  in multi-lines as well</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/^11.+18$/gm</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Output:\n    XX \n    11/18/17 \n    09/12/18 \n    XX \n*/</span></code></pre></div>\n<hr>\n<h3>🔥 Simple <em>Regex highlighter</em></h3>\n<p>For the <em>purpose of evaluating various regex patterns</em>, use the following simple <em>regex highlighter function</em> in a sample .html file.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Regex highlighter function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">output</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> regex<span class=\"token punctuation\">,</span> el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    el<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span>{str}&lt;/span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Regex test condition</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">This is pretty cool!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/is/g</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Call the output fn to highlight pattern matches</span>\n<span class=\"token function\">output</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> regex<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pre'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And in the <em>body of the file</em> use a <code class=\"language-text\">&lt;pre&gt;</code> tag to <em>display the output with some styling to highlight the matches</em>. For e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">pre</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">span</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> dodgerblue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>🥁 And that’s a wrap on our <em>quick reference guide</em>. These notes are an <em>inspiration</em> from <a href=\"https://egghead.io/instructors/joe-maddalone\">Joe Maddalone’s</a> <a href=\"https://egghead.io/courses/regex-in-javascript\">egghead Regex series</a>. His video series is a <em>great resource</em> to get up to speed on regex in Javascript.</p>","frontmatter":{"title":"🛠 Using Regex in Javascript","date":"June 21, 2020","description":"Quick reference on using regular expressions in Javascript."}}},"pageContext":{"slug":"/javascript-regex/","previous":null,"next":{"fields":{"slug":"/markdown-reference/"},"frontmatter":{"title":"📚 Markdown Reference"}}}}}